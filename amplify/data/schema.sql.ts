/* eslint-disable */
/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import { a } from "@aws-amplify/data-schema";
import { configure } from "@aws-amplify/data-schema/internals";
import { secret } from "@aws-amplify/backend";

export const schema = configure({
    database: {
        identifier: "IDZb920Fx1GwK3ZQNQG5JPg",
        engine: "postgresql",
        connectionUri: secret("SQL_CONNECTION_STRING"),
        sslCert: secret("RDS_SSL_CERTIFICATE"),
        vpcConfig: {
            vpcId: "vpc-0b84dee66a0340569",
            securityGroupIds: [
                "sg-0383754e6676c4210"
            ],
            subnetAvailabilityZones: [
                {
                    subnetId: "subnet-06f94e104d3f31584",
                    availabilityZone: "us-west-2b"
                },
                {
                    subnetId: "subnet-02e05353e3f257087",
                    availabilityZone: "us-west-2a"
                }
            ]
        }
    }
}).schema({
    "AcceptancePlan": a.model({
        id: a.string().required(),
        uploadId: a.string().required(),
        seqNo: a.integer().required(),
        skillId: a.string().required(),
        certificationNo: a.string().required(),
        tradeName: a.string().required(),
        nameOfIndividual: a.string().required(),
        locationZipCode: a.string().required(),
        locationPrefecture: a.string().required(),
        locationAddress: a.string().required(),
        telephoneNo: a.string().required(),
        fax: a.string().required(),
        email: a.string().required(),
        responsiblePersonPosition: a.string().required(),
        nameOfPersonInCharge: a.string().required(),
        foreignAcceptanceProgram1: a.string().required()
    }).identifier([
        "id"
    ]),
    "FileProcess": a.model({
        id: a.string().required(),
        start: a.datetime(),
        end: a.datetime(),
        status: a.ref("FileProcessStatus"),
        requestParams: a.json(),
        errorMessage: a.string(),
        processedBy: a.string(),
        camundaProcessInstanceKey: a.string(),
        createdAt: a.datetime(),
        month: a.integer().required(),
        year: a.integer().required()
    }).identifier([
        "id"
    ]),
    "FileUploads": a.model({
        id: a.string().required(),
        fileType: a.ref("FileUploadsFileType").required(),
        fileName: a.string().required(),
        s3ObjectKey: a.string().required(),
        deletedAt: a.datetime(),
        createdDate: a.datetime().required(),
        isMigrated: a.boolean(),
        migratedRows: a.integer(),
        isNormalRuleApplied: a.boolean(),
        isExported: a.boolean(),
        downloadS3ObjectKey: a.string(),
        isCommonRuleApplied: a.boolean(),
        fileProcessId: a.string().required(),
        versionId: a.string()
    }).identifier([
        "id"
    ]),
    "FileUploadsForeignWorker": a.model({
        uploadId: a.string().required(),
        compareToId: a.string(),
        compareToMembersInfoId: a.string(),
        compareToReEmploymentDataId: a.string(),
        prevMembersInfoId: a.string(),
        prevReemploymentId: a.string()
    }).identifier([
        "uploadId"
    ]),
    "FileUploadsInformationSupplement": a.model({
        uploadId: a.string().required(),
        reEmploymentFileUploadId: a.string()
    }).identifier([
        "uploadId"
    ]),
    "ForeignWorker": a.model({
        id: a.string().required(),
        certificationNo: a.string(),
        residenceCardNo: a.string(),
        ccusTechId: a.string(),
        name: a.string(),
        dob: a.string()
    }).identifier([
        "id"
    ]),
    "ForeignWorkerWithReEmployment": a.model({
        id: a.integer().default(),
        foreignWorkerId: a.string().required(),
        identificationMethod: a.string(),
        reEmploymentId: a.string(),
        noOfOccurence: a.integer().required()
    }).identifier([
        "id"
    ]),
    "JudgementRules": a.model({
        ruleNo: a.integer().required(),
        sort: a.integer().required(),
        className: a.string().required(),
        classification: a.string().required(),
        greenCode: a.string().required(),
        judgementCode: a.string().required(),
        enabled: a.boolean().required()
    }).identifier([
        "ruleNo"
    ]),
    "MembersInformation": a.model({
        id: a.integer().default(),
        supplierCode: a.string().required(),
        memberClassification: a.string().required(),
        certificationNo: a.string().required(),
        bussinessPartnerCode: a.string().required(),
        memberNameInKanji: a.string().required(),
        memberNameInKana: a.string().required(),
        dateOfJoining: a.string().required(),
        annualFeeFirstTimeYearMonth: a.string(),
        annualFeeFirstTimeFee: a.string(),
        annualFeeNextTimeMonth: a.string(),
        annualFeeNextTimeFee: a.string(),
        billingAddressPostalCode: a.string(),
        billingAddress1: a.string(),
        billingAddress2: a.string(),
        billingAddress3: a.string(),
        billingAddressName1: a.string(),
        billingAddressName2: a.string(),
        billingAddressTitle: a.string(),
        billingAddressPhone: a.string(),
        billingAddressFax: a.string(),
        debitAccountBankCode: a.string(),
        debitAccountBankName: a.string(),
        debitAccountBranchCode: a.string(),
        debitAccountBranchName: a.string(),
        debitAccountItemCode: a.string(),
        debitAccountItemName: a.string(),
        debitAccountNumber: a.string(),
        debitAccountHolderName: a.string(),
        closingDevision: a.string(),
        closingDate: a.string(),
        closingReason: a.string(),
        memo: a.string(),
        createdBy: a.string(),
        createdAt: a.datetime(),
        updatedBy: a.string(),
        updatedAt: a.datetime(),
        uploadId: a.string().required()
    }).identifier([
        "id"
    ]),
    "OutputLookUp": a.model({
        id: a.string().required(),
        field: a.string().required(),
        subNo: a.integer().required(),
        key1: a.string().required(),
        key2: a.string().required(),
        displayName: a.string().required()
    }).identifier([
        "id"
    ]),
    "ProcessLogs": a.model({
        uploadId: a.string().required(),
        process: a.ref("ProcessLogsProcess"),
        startedAt: a.datetime(),
        endedAt: a.datetime(),
        errorMessage: a.json(),
        createdAt: a.datetime(),
        data: a.json()
    }).identifier([
        "uploadId"
    ]),
    "ReEmploymentHistory": a.model({
        id: a.string().required(),
        uploadId: a.string().required(),
        seqNo: a.integer().required(),
        certificationNo: a.string(),
        organizationName: a.string(),
        residenceCard: a.string(),
        ccusTechId: a.string(),
        workerName: a.string(),
        nameInHiragana: a.string(),
        dob: a.string(),
        nationality: a.string(),
        businessClass: a.string(),
        examPassCategory: a.string(),
        certNo1: a.string(),
        passedExamName1: a.string(),
        dateOfStart: a.string(),
        engagementStatus: a.string(),
        retirementDate: a.string(),
        dateOfTransitionNo2: a.string(),
        dateOfReturn: a.string(),
        dateOfOccurrence: a.string()
    }).identifier([
        "id"
    ]),
    "RuleOutput": a.model({
        dataCategory: a.string().required(),
        judgement: a.string(),
        previousMonthDiff: a.string().required(),
        billingAddressChange: a.string().required(),
        memberClassification: a.string().required(),
        memberInformation: a.string().required(),
        firstCompanyInvoice: a.string().required(),
        firstForeignInvoice: a.string().required(),
        invoiceNotAllowed: a.string().required(),
        employmentStatusGreen: a.string(),
        createdAt: a.datetime().required(),
        identificationMethod: a.string().required(),
        companyBillingPending: a.string().required(),
        foreignBillingPending: a.string().required(),
        memberCode: a.string().required(),
        presenceOfClaim: a.string().required(),
        judgementMatchedRules: a.json(),
        judgementRuleNo: a.integer(),
        previousCompanyBillingPending: a.string().required(),
        previousForeignBillingPending: a.string().required(),
        previousInvoiceNotAllowed: a.string().required(),
        billingReEmpRefundInvoice: a.json(),
        billingReEmpRegularInvoice: a.string(),
        billingReEmpRetroactiveInvoice: a.json(),
        billingInvoiceText: a.string(),
        billingInvoiceComment: a.string(),
        billingReEmploymentInvoiceText: a.string(),
        billingReEmploymentInvoiceComment: a.string(),
        prevMemberClassification: a.string().required(),
        claimSuspension: a.string(),
        billingRefundInvoice: a.json(),
        billingRegularInvoice: a.string(),
        billingRetroactiveInvoice: a.json(),
        currentManualBillingInstructions: a.string(),
        previousManualBillingInstructions: a.string(),
        billingInstructionRuleNo: a.integer(),
        billingResumptionProcessed: a.string(),
        rehireBillingStartProcessed: a.string(),
        foreignWorkerWithReEmploymentId: a.integer().required()
    }).identifier([
        "foreignWorkerWithReEmploymentId"
    ]),
    "_prisma_migrations": a.model({
        id: a.string().required(),
        checksum: a.string().required(),
        finished_at: a.string(),
        migration_name: a.string().required(),
        logs: a.string(),
        rolled_back_at: a.string(),
        started_at: a.string().required(),
        applied_steps_count: a.integer().required()
    }).identifier([
        "id"
    ]),
    FileProcessStatus: a.enum([
        "FAILED",
        "DONE",
        "CAMUNDA_SERVICE_3",
        "CAMUNDA_SERVICE_2",
        "CAMUNDA_PARSING",
        "INPROGRESS"
    ]),
    ProcessLogsProcess: a.enum([
        "COMMON_RULE",
        "EXPORT",
        "NORMAL_RULE",
        "PARSING"
    ]),
    FileUploadsFileType: a.enum([
        "ACCEPTANCE_PLAN_DATA",
        "INFORMATION_SUPPLEMENT_DATA",
        "REEMPLOYMENT_DATA",
        "MEMBERS_INFO_DATA"
    ])
});
